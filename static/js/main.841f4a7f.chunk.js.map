{"version":3,"sources":["serviceWorker.js","components/Emoji.js","components/ProductivityItem.js","components/BreakItem.js","components/AddTaskModal.js","refs/keys.js","components/CounterModal.js","components/BreakCounterModal.js","components/PerformanceChart.js","refs/colors.js","screens/Home.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Emoji","props","this","label","symbol","aria-hidden","aria-label","className","role","React","Component","focusAtIndex","index","item","mode","onRemove","onStart","activityName","emoji","startedAt","minutes","taskName","style","backgroundColor","color","href","onClick","state","handleActivityNameChange","event","setState","target","value","handleTaskNameChange","onKeyDown","keyCode","setTimeout","onDismiss","addEventListener","onAddTask","isFormComplete","trim","Helmet","charSet","autoFocus","id","name","onChange","placeholder","type","disabled","removeEventListener","LOCAL_STORAGE_DATA","prefix","LOCAL_STORAGE_INDEX","LOCAL_STORAGE_RUNNING_PROGRESS","LOCAL_STORAGE_RUNNING_BREAK_PROGRESS","LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE","LOCAL_STORAGE_ASSIGNED_COLORS","seconds","isBreaking","startTime","moment","progresses","isCounting","localStorage","getItem","keys","JSON","parse","length","pop","setItem","stringify","toString","dayDate","format","startTickingTheTimer","currentTask","toTickNumber","minimumMinutes","map","key","markProgressAs","opacity","setBreakOrContinue","secondsGap","Math","floor","toDate","number","progressState","savedLocalProgresses","newProgress","split","newProgresses","concat","removeItem","sendProgresses","runningBreakProgress","done","runningBreakProgressesDayDate","sendBreakProgress","data","maxSpendMinutes","calculateMaxSpendTime","bottom","display","justifyContent","left","position","right","top","zIndex","borderRadius","minWidth","padding","getPerformanceData","date","alignItems","flexDirection","marginLeft","fontSize","marginTop","minHeight","height","Number","getTotalThisDateDataValue","width","values","valueItem","textToShow","spendMinutes","progress","alert","border","fontWeight","flex","textShadow","colorsData","nativeData","isDateRegisteredInIndex","dataIndex","valuesToAdd","undefined","start","push","sort","a","b","dataToShow","Date","setDate","getDate","unshift","dataToShowData","dataData","totalThisDateDataValue","colors","getRandomColor","minNumber","maxNumber","min","ceil","max","random","getRandomInt","latestId","addTaskToIndex","isBreakProcessingCount","isProcessingCount","isShowPerformanceChart","selectedDate","progressIndex","newData","thisProgress","progressType","splice","updateProgresses","assignColorIfHaveNoColor","updateColorsData","newIndex","loadData","seeMyPerformance","incrementSelectedDateWith","marginRight","marginBottom","addTask","addBreak","dataItem","getTodayTopMostItemId","margin","applyAddTask","latestData","reverse","runningProgress","thisDataIndex","toIndex","asssignedColors","asssignedColorsJSON","latestIndex","currentIndex","require","ReactDOM","render","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.841f4a7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nexport default class Emoji extends React.Component {\n    render() {\n        const { props } = this\n        const { label, symbol } = props\n\n        return (\n            <span\n                aria-hidden = {label ? 'false' : 'true'}\n                aria-label = {label ? label : ''}\n                className = 'emoji'\n                role = 'img'\n            >\n                {symbol}\n            </span>\n        )\n    }\n}","import React from 'react'\n\nimport Emoji from '../components/Emoji'\n\nexport default class extends React.Component {\n    render() {\n        const { props } = this\n        const { focusAtIndex, index, item, mode, onRemove, onStart } = props\n        const { activityName, emoji, startedAt, minutes, taskName } = item\n\n        return (\n            <div\n                className = {mode === 'View Edit' ? 'productivity-item-container-edit-mode' : 'productivity-item-container-main-mode'}\n                style = {{\n                    backgroundColor: focusAtIndex === index ? 'mediumseagreen' : 'white'\n                }}\n            >\n                <div\n                    className = 'productivity-item-top-details-container'\n                >\n                    <div>\n                        <p\n                            className = 'productivity-item-activity-name'\n                            style = {{\n                                color: focusAtIndex === index ? 'white' : 'gray'\n                            }}\n                        >\n                            {activityName}\n                        </p>\n\n                        <p\n                            className = 'productivity-item-task-name'\n                        >\n                            {taskName}\n                        </p>\n\n                        {\n                            startedAt !== '' ?\n                                <p\n                                    className = 'productivity-item-started-at-and-minutes'\n                                >\n                                    Started at {startedAt} ({minutes} minutes)\n                                </p>\n                                :\n                                null\n                        }\n                    </div>\n                    \n                    {\n                        startedAt !== '' ?\n                            (\n                                emoji !== '' ?\n                                    <div\n                                        className = 'productivity-item-emoji-background'\n                                    >\n                                        <p\n                                            className = 'productivity-item-emoji'\n                                        >\n                                            <Emoji\n                                                symbol = {emoji}\n                                            />\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                            )\n                            :\n                            <div\n                                className = 'productivity-item-options-container'\n                            >\n                                {\n                                    mode === 'Main' && focusAtIndex === index ?\n                                        <a\n                                            className = 'productivity-item-start-button'\n                                            href = '/dedicated-time-winner/#'\n                                            onClick = {onStart}\n                                        >\n                                            Start\n                                        </a>\n                                        :\n                                        null\n                                }\n\n                                {\n                                    mode === 'View Edit' ?\n                                        <a\n                                            className = 'productivity-item-remove-button'\n                                            href = '/dedicated-time-winner/#'\n                                            onClick = {onRemove}\n                                        >\n                                            Remove\n                                        </a>\n                                        :\n                                        null\n                                }\n                            </div>\n                    }\n                </div>\n\n                {/* {\n                    startedAt !== '' ?\n                        <div\n                            className = 'productivity-item-efforts-container'\n                        >\n                            <div\n                                className = 'productivity-item-efforts-top-container'\n                            >\n                                <p\n                                    className = 'productivity-item-efforts-title-text'\n                                >\n                                    Efforts\n                                </p>\n                            </div>\n\n                            <div\n                                className = 'productivity-item-efforts-bottom-container'\n                            >\n                                {\n                                    efforts.map((effortItem, effortIndex) => {\n                                        const { minutes, type } = effortItem\n\n                                        return (\n                                            <div\n                                                className = 'productivity-item-effort-container'\n                                                key = {JSON.stringify(effortItem)}\n                                                style = {{\n                                                    marginTop: effortIndex === 0 ? 0 : 20\n                                                }}\n                                            >\n                                                <p\n                                                    className = 'productivity-item-effort-text'\n                                                >\n                                                    {minutes} minutes {type}\n                                                </p>\n\n                                                <div\n                                                    className = 'productivity-item-effort-emoji-container'\n                                                    style = {{\n                                                        backgroundColor: type === 'productive' ? 'steelblue' : 'gainsboro'\n                                                    }}\n                                                >\n                                                    <p\n                                                        className = 'productivity-item-effort-emoji'\n                                                    >\n                                                        <Emoji\n                                                            symbol = {type === 'productive' ? '💻' : '💤'}\n                                                        />\n                                                    </p>\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                        :\n                        null\n                } */}\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport Emoji from '../components/Emoji'\n\nexport default class extends React.Component {\n    render() {\n        const { props } = this\n        const { focusAtIndex, index, item, mode, onRemove, onStart } = props\n        const { minutes, startedAt } = item\n\n        return (\n            <div\n                className = {mode === 'View Edit' ? 'break-item-container-edit-mode' : 'break-item-container-main-mode'}\n                style = {{\n                    backgroundColor: focusAtIndex === index ? 'darkslateblue' : 'gray'\n                }}\n            >\n                <div>\n                    <p\n                        className = 'break-item-title'\n                    >\n                        Break\n                    </p>\n\n                    {\n                        startedAt !== '' ?\n                            <p\n                                className = 'break-item-started-at-and-minutes'\n                            >\n                                Started at {startedAt} ({minutes} minutes)\n                            </p>\n                            :\n                            null\n                    }\n                </div>\n\n                {\n                    startedAt !== '' ?\n                        <div\n                            className = 'break-item-emoji-background'\n                        >\n                            <p\n                                className = 'break-item-emoji'\n                            >\n                                <Emoji\n                                    symbol = '💤'\n                                />\n                            </p>\n                        </div>\n                        :\n                        <div\n                            className = 'break-item-options-container'\n                        >\n                            {\n                                mode === 'Main' && focusAtIndex === index ?\n                                    <a\n                                        className = 'break-item-start-button'\n                                        href = '/dedicated-time-winner/#'\n                                        onClick = {onStart}\n                                    >\n                                        Start\n                                    </a>\n                                    :\n                                    null\n                            }\n\n                            {\n                                mode === 'View Edit' ?\n                                    <a\n                                        className = 'break-item-remove-button'\n                                        href = '/dedicated-time-winner/#'\n                                        onClick = {onRemove}\n                                    >\n                                        Remove\n                                    </a>\n                                    :\n                                    null\n                            }\n                        </div>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nexport default class extends React.Component {\n    state = {\n        activityName: '',\n        taskName: ''\n    }\n\n    handleActivityNameChange = (event) => {\n        this.setState({\n            activityName: event.target.value,\n            taskName: ''\n        })\n    }\n    handleTaskNameChange = (event) => this.setState({taskName: event.target.value})\n\n    componentDidMount() {\n        window.addEventListener('keydown', this.onKeyDown)\n    }\n\n    render() {\n        const { props, state } = this\n        const { onDismiss, onAddTask } = props\n        const { activityName, taskName } = state\n\n        const isFormComplete = activityName.trim() !== '' && taskName.trim() !== ''\n\n        return (\n            <div\n                className = 'add-task-modal-main-container'\n            >\n                <Helmet>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tcharSet = \"utf-8\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<title> \n\t\t\t\t\t\t{activityName.trim() === '' ? 'Add Task' : `Add ${activityName}'s Task`}\n\t\t\t\t\t</title>\n\t\t\t\t</Helmet>\n\n                <div\n                    className = 'add-task-modal-background'\n                    onClick = {onDismiss}\n                />\n\n                <div\n                    className = 'add-task-modal-container'\n                >\n                    <div\n                        className = 'add-task-modal-top-content-container'\n                    >\n                        <h2\n                            className = 'add-task-modal-title'\n                        >\n                            Add Task\n                        </h2>\n\n                        <a\n                            href = '/dedicated-time-winner/#'\n                            onClick = {onDismiss}\n                        >\n                            <p\n                                className = 'add-task-modal-close-button'\n                            >\n                                X\n                            </p>\n                        </a>\n                    </div>\n\n                    <input\n                        autoFocus\n                        className = \"add-task-modal-input\"\n                        id = \"activity-name\"\n                        name = \"activity-name\"\n                        onChange = {this.handleActivityNameChange}\n                        placeholder = 'Input activity name...'\n                        type = \"text\"\n                        value = {activityName}\n                    />\n\n                    <input\n                        className = \"add-task-modal-input\"\n                        disabled = {activityName.trim() === ''}\n                        id = {`${activityName.trim()}-task-name`}\n                        name = {`${activityName.trim()}-task-name`}\n                        onChange = {this.handleTaskNameChange}\n                        placeholder = 'Input task name...'\n                        style = {{\n                            backgroundColor: activityName.trim() === '' ? 'darkgray' : 'white'\n                        }}\n                        type = \"text\"\n                        value = {taskName}\n                    />\n\n                    {\n                        !isFormComplete ?\n                            <div\n                                className = 'add-task-modal-add-button'\n                                style = {{\n                                    backgroundColor: 'dimgray'\n                                }}\n                            >\n                                Add\n                            </div>\n                            :\n                            <a\n                                className = 'add-task-modal-add-button'\n                                href = '/dedicated-time-winner/#'\n                                onClick = {() => onAddTask(activityName, taskName)}\n                                style = {{\n                                    backgroundColor: 'mediumseagreen'\n                                }}\n                            >\n                                Add\n                            </a>\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.onKeyDown)\n    }\n\n    onKeyDown = (event) => {\n        if(event.keyCode === 27) {\n            setTimeout(this.props.onDismiss, 100)\n        }\n    }\n}","const prefix = 'v2'\n\nexport default {\n    LOCAL_STORAGE_DATA: prefix + 'data',\n    LOCAL_STORAGE_INDEX: prefix + 'index',\n    LOCAL_STORAGE_RUNNING_PROGRESS: prefix + 'running_progress',\n    LOCAL_STORAGE_RUNNING_BREAK_PROGRESS: prefix + 'running_break_progress',\n    LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE: prefix + 'running_break_progress_day_date',\n    LOCAL_STORAGE_ASSIGNED_COLORS: prefix + 'assigned_colors'\n}","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport moment from 'moment'\n\nimport keys from '../refs/keys'\n\nexport default class extends React.Component {\n    state = {\n        minutes: 0,\n        seconds: 0,\n        isBreaking: false,\n        startTime: moment(),\n        progresses: []\n    }\n\n    isCounting = true\n\n    async componentDidMount() {\n        let progresses = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\n        if(progresses !== null) {\n            progresses = JSON.parse(progresses)\n\n            this.setState({\n                startTime: moment(progresses[progresses.length - 1].startedAt),\n                isBreaking: progresses[progresses.length - 1].type === 'break'\n            })\n            \n            progresses.pop()\n\n            this.setState({progresses})\n        } else {\n            localStorage.setItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS, JSON.stringify([\n                {\n                    startedAt: this.state.startTime.toString(),\n                    minutes: 0,\n                    emoji: '',\n                    type: 'productivity',\n                    dayDate: moment().format('YYYY-MM-DD')\n                }\n            ]))\n        }\n\n        this.startTickingTheTimer()\n    }\n    \n    render() {\n        const { props, state } = this\n        const { currentTask } = props\n        const { minutes, seconds, isBreaking } = state\n\n        return (\n            <div\n                className = 'counter-modal-background-container'\n            >\n                <Helmet>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tcharSet = \"utf-8\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<title>\n                        {this.toTickNumber(minutes)}:{this.toTickNumber(seconds)} - {isBreaking ? 'Breaking' : currentTask}\n\t\t\t\t\t</title>\n\t\t\t\t</Helmet>\n\n                <div\n                    className = 'counter-modal-container'\n                    style = {{\n                        backgroundColor: isBreaking ? 'darkslateblue' : 'white'\n                    }}\n                >\n                    <h3\n                        className = 'counter-modal-title'\n                        style = {{\n                            color: isBreaking ? 'white' : 'gray'\n                        }}\n                    >\n                        {isBreaking ? 'Breaking...' : \"Let's go, get them!\"}\n                    </h3>\n\n                    <h2\n                        className = 'counter-modal-task-name'\n                    >\n                        {currentTask}\n                    </h2>\n\n                    <p\n                        className = 'counter'\n                        style = {{\n                            color: isBreaking ? 'white' : 'gray'\n                        }}\n                    >\n                        {this.toTickNumber(minutes)}:{this.toTickNumber(seconds)}\n                    </p>\n\n                    <div\n                        className = 'counter-choice-buttons-container'\n                    >\n                        {\n                            [\n                                {\n                                    value: '💩 Not achieved at all',\n                                    minimumMinutes: 0\n                                },\n                                {\n                                    value: '🐌 Just making a progress',\n                                    minimumMinutes: 3\n                                },\n                                {\n                                    value: '🎯 Achieved',\n                                    minimumMinutes: 3\n                                },\n                                {\n                                    value: '💪🏻 More than achieved, bro!',\n                                    minimumMinutes: 3\n                                }\n                            ].map(item => {\n                                if(minutes >= item.minimumMinutes && !isBreaking) {\n                                    return (\n                                        <a\n                                            className = 'counter-choice-button'\n                                            href = '/dedicated-time-winner/#'\n                                            key = {JSON.stringify(item)}\n                                            onClick = {() => this.markProgressAs(item)}\n                                        >\n                                            {item.value}\n                                        </a>\n                                    )\n                                } else {\n                                    return (\n                                        <div\n                                            className = 'counter-choice-button'\n                                            key = {JSON.stringify(item)}\n                                            style = {{\n                                                opacity: 0.3\n                                            }}\n                                        >\n                                            {item.value}\n                                        </div>\n                                    )\n                                }\n                            })\n                        }\n\n                        <a\n                            className = 'counter-break-button'\n                            href = '/dedicated-time-winner/#'\n                            onClick = {() => this.setBreakOrContinue()}\n                            style = {{\n                                backgroundColor: isBreaking ? 'mediumseagreen' : 'crimson'\n                            }}\n                        >\n                            {isBreaking ? 'Continue' : 'Break'}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isCounting = false\n    }\n\n    startTickingTheTimer() {\n        const secondsGap = Math.floor((moment().toDate() - this.state.startTime.toDate()) / 1000)\n    \n        const seconds = secondsGap % 60\n        const minutes = (secondsGap - seconds) / 60\n\n        this.setState({\n            minutes,\n            seconds\n        })\n\n        if(this.isCounting) {\n            setTimeout(() => this.startTickingTheTimer(), 100)\n        }\n    }\n\n    toTickNumber(number) {\n        if(number < 10) {\n            return '0' + number.toString()\n        } else {\n            return number.toString()\n        }\n    }\n\n    async markProgressAs(progressState) {\n        let savedLocalProgresses = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\n        const { props, state } = this\n        const { minutes, progresses, startTime } = state\n\n        const newProgress = {\n            startedAt: startTime.format('HH:mm'),\n            minutes,\n            emoji: progressState.value.split(' ')[0].trim(),\n            type: 'productivity'\n        }\n\n        if(savedLocalProgresses !== null) {\n            savedLocalProgresses = JSON.parse(savedLocalProgresses)\n\n            newProgress.dayDate = savedLocalProgresses[savedLocalProgresses.length - 1].dayDate\n        }\n\n        const newProgresses = JSON.parse(JSON.stringify(progresses)).concat(newProgress)\n\n        await localStorage.removeItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\n        props.sendProgresses(newProgresses)\n\n        this.setState({progresses: newProgresses})\n    }\n\n    async setBreakOrContinue() {\n        const { state } = this\n        const { isBreaking, minutes, progresses, startTime } = state\n\n        const newProgresses = JSON.parse(JSON.stringify(progresses))\n\n        const newProgress = {\n            startedAt: startTime.format('HH:mm'),\n            minutes\n        }\n\n        let savedLocalProgresses = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\n        if(savedLocalProgresses !== null) {\n            savedLocalProgresses = JSON.parse(savedLocalProgresses)\n\n            newProgress.dayDate = savedLocalProgresses[savedLocalProgresses.length - 1].dayDate\n        }\n\n        if(!isBreaking) {\n            await this.setState({progresses: newProgresses.concat({\n                ...newProgress,\n                emoji: '',\n                type: 'productivity'\n            })})\n\n            localStorage.setItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS, JSON.stringify(\n                this.state.progresses.concat({\n                    startedAt: moment().toString(),\n                    minutes: 0,\n                    type: 'break',\n                    dayDate: moment().format('YYYY-MM-DD')\n                })\n            ))\n        } else {\n            await this.setState({progresses: newProgresses.concat({\n                ...newProgress,\n                type: 'break'\n            })})\n\n            localStorage.setItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS, JSON.stringify(\n                this.state.progresses.concat({\n                    startedAt: moment().toString(),\n                    minutes: 0,\n                    emoji: '',\n                    type: 'productivity',\n                    dayDate: moment().format('YYYY-MM-DD')\n                })\n            ))\n        }\n\n        this.setState({\n            isBreaking: !isBreaking,\n            minutes: 0,\n            seconds: 0,\n            startTime: moment()\n        })\n    }\n}","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport moment from 'moment'\n\nimport keys from '../refs/keys'\n\nexport default class extends React.Component {\n    state = {\n        minutes: 0,\n        seconds: 0,\n        startTime: moment()\n    }\n\n    isCounting = true\n\n    async componentDidMount() {\n        const runningBreakProgress = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS)\n        const runningBreakProgressesDayDate = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE)\n\n        if(runningBreakProgressesDayDate === null) {\n            localStorage.setItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE, moment().format('YYYY-MM-DD'))\n        }\n\n        if(runningBreakProgress !== null) {\n            this.setState({startTime: moment(runningBreakProgress)})\n        } else {\n            localStorage.setItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS, moment().toString())\n        }\n\n        this.startTickingTheTimer()\n    }\n    \n    render() {\n        const { state } = this\n        const { minutes, seconds } = state\n\n        return (\n            <div\n                className = 'break-counter-modal-background-container'\n            >\n                <Helmet>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tcharSet = \"utf-8\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<title>\n                        {this.toTickNumber(minutes)}:{this.toTickNumber(seconds)} - Breaking\n\t\t\t\t\t</title>\n\t\t\t\t</Helmet>\n\n                <div\n                    className = 'break-counter-modal-container'\n                >\n                    <h3\n                        className = 'break-counter-modal-title'\n                    >\n                        Breaking...\n                    </h3>\n\n                    <p\n                        className = 'counter'\n                        style = {{\n                            color: 'white'\n                        }}\n                    >\n                        {this.toTickNumber(minutes)}:{this.toTickNumber(seconds)}\n                    </p>\n\n                    <a\n                        className = 'break-counter-button'\n                        href = '/dedicated-time-winner/#'\n                        onClick = {() => this.done()}\n                        style = {{\n                            backgroundColor: 'mediumseagreen'\n                        }}\n                    >\n                        Done\n                    </a>\n                </div>\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isCounting = false\n    }\n\n    startTickingTheTimer() {\n        const secondsGap = Math.floor((moment().toDate() - this.state.startTime.toDate()) / 1000)\n    \n        const seconds = secondsGap % 60\n        const minutes = (secondsGap - seconds) / 60\n\n        this.setState({\n            minutes,\n            seconds\n        })\n\n        if(this.isCounting) {\n            setTimeout(() => this.startTickingTheTimer(), 100)\n        }\n    }\n\n    toTickNumber(number) {\n        if(number < 10) {\n            return '0' + number.toString()\n        } else {\n            return number.toString()\n        }\n    }\n\n    async done() {\n        await localStorage.removeItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS)\n\n        const { props, state } = this\n        const { startTime, minutes } = state\n\n        const runningBreakProgressesDayDate = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE)\n\n        await localStorage.removeItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS_DAY_DATE)\n\n        props.sendBreakProgress(\n            startTime.format('HH:mm'),\n            runningBreakProgressesDayDate,\n            minutes\n        )\n    }\n}","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport moment from 'moment'\n\nexport default class extends React.Component {\n    state = {\n        data: [],\n        maxSpendMinutes: 360\n    }\n\n    componentDidMount() {\n        this.calculateMaxSpendTime()\n    }\n\n    render() {\n        return (\n            <div\n                style = {{\n                    bottom: 0,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    left: 0,\n                    position: 'fixed',\n                    right: 0,\n                    top: 0\n                }}\n            >\n                <Helmet>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tcharSet = \"utf-8\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<title> \n\t\t\t\t\t\tThis week's performance chart\n\t\t\t\t\t</title>\n\t\t\t\t</Helmet>\n\n                <a\n                    href = '/dedicated-time-winner/#'\n                    onClick = {this.props.onDismiss}\n                    style = {{\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                        bottom: 0,\n                        left: 0,\n                        position: 'absolute',\n                        right: 0,\n                        top: 0\n                    }}\n                >\n                </a>\n\n                <div\n                    style = {{\n                        bottom: 80,\n                        display: 'flex',\n                        position: 'absolute',\n                        top: 80,\n                        zIndex: 1\n                    }}\n                >\n                    <div\n                        style = {{\n                            backgroundColor: 'white',\n                            borderRadius: 7,\n                            display: 'flex',\n                            minWidth: 250,\n                            padding: 20\n                        }}\n                    >\n                        {\n                            this.getPerformanceData().map((item, index) => {\n                                return (\n                                    <div\n                                        key = {moment(item.date).format('DD/MM')}\n                                        style = {{\n                                            alignItems: 'center',\n                                            display: 'flex',\n                                            flexDirection: 'column',\n                                            marginLeft: index === 0 ? 0 : 10\n                                        }}\n                                    >\n                                        <a\n                                            href = '#progresses'\n                                            // onClick = {() => this.props.selectDate(moment(item.date).format('YYYY-MM-DD'))}\n                                        >\n                                            <p\n                                                style = {{\n                                                    color: 'black',\n                                                    fontSize: 12\n                                                }}\n                                            >\n                                                {moment(item.date).format('DD/MM')}\n                                            </p>\n                                        </a>\n\n                                        <div\n                                            style = {{\n                                                alignItems: 'flex-end',\n                                                display: 'flex',\n                                                marginTop: 10,\n                                                minHeight: 'calc(100% - 20px)'\n                                            }}\n                                        >\n                                            <div\n                                                style = {{\n                                                    display: 'flex',\n                                                    flexDirection: 'column-reverse',\n                                                    height:  Number(this.getTotalThisDateDataValue(item) / this.state.maxSpendMinutes * 100).toString() + '%',\n                                                    width: 30\n                                                }}\n                                            >\n                                                {\n                                                    item.values.map(valueItem => {\n                                                        return (\n                                                            <a\n                                                                href = '#progresses'\n                                                                key = {valueItem.id}\n                                                                onClick = {() => {\n                                                                    setTimeout(() => {\n                                                                        if(valueItem.type === 'productivity') {\n                                                                            let textToShow = `${valueItem.activityName} (${valueItem.spendMinutes} mins)\\n\\n${valueItem.taskName}`\n\n                                                                            if(valueItem.progress !== '') {\n                                                                                textToShow = `${textToShow}\\nProgress: ${valueItem.progress}`\n                                                                            }\n\n                                                                            alert(textToShow)\n                                                                        } else if(valueItem.type === 'break') {\n                                                                            alert(`Break (${valueItem.spendMinutes} mins)`)\n                                                                        }\n                                                                    }, 100)\n                                                                }}\n                                                                style = {{\n                                                                    alignItems: 'center',\n                                                                    backgroundColor: valueItem.color,\n                                                                    border: '2px dotted black',\n                                                                    color: 'white',\n                                                                    display: 'flex',\n                                                                    flexDirection: 'column',\n                                                                    fontSize: 12,\n                                                                    fontWeight: 'bold',\n                                                                    flex: valueItem.spendMinutes,\n                                                                    justifyContent: 'center',\n                                                                    textShadow: '-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000'\n                                                                }}\n                                                            >\n                                                                <p>\n                                                                    {valueItem.spendMinutes}\n                                                                </p>\n                                                                \n                                                                <p>\n                                                                    {valueItem.progress}\n                                                                </p>\n                                                            </a>\n                                                        )\n                                                    })\n                                                }\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    getPerformanceData() {\n        const { props } = this\n        const { colorsData, nativeData } = props\n\n        let data = []\n\n        for(const item of nativeData) {\n            let isDateRegisteredInIndex = null\n\n            for(const dataIndex in data) {\n                if(data[dataIndex].date === item.dayDate) {\n                    isDateRegisteredInIndex = dataIndex\n\n                    break\n                }\n            }\n\n            let valuesToAdd = {}\n\n            if(item.type === 'productivity') {\n                valuesToAdd = {\n                    color: colorsData === undefined ? 'gray' : colorsData[item.activityName],\n                    start: item.startedAt,\n                    spendMinutes: item.minutes,\n                    activityName: item.activityName,\n                    taskName: item.taskName,\n                    progress: item.emoji,\n                    type: item.type,\n                    id: item.id\n                }\n            } else if(item.type === 'break') {\n                valuesToAdd = {\n                    color: 'darkslateblue',\n                    start: item.startedAt,\n                    spendMinutes: item.minutes,\n                    activityName: 'Break',\n                    taskName: '',\n                    progress: '',\n                    type: item.type,\n                    id: item.id\n                }\n            }\n\n            if(isDateRegisteredInIndex === null) {\n                data.push({\n                    date: item.dayDate,\n                    values: [\n                        valuesToAdd\n                    ]\n                })\n            } else {\n                data[isDateRegisteredInIndex].values.push(valuesToAdd)\n\n                data[isDateRegisteredInIndex].values.sort((a,b) => (a.start > b.start) ? 1 : ((b.start > a.start) ? -1 : 0))\n            }\n        }\n\n        const dataToShow = []\n\n        for(let index = 0; index < 7; index++) {\n            const date = new Date()\n\n            date.setDate(date.getDate() - index)            \n\n            dataToShow.unshift({\n                date: moment(date).format('YYYY-MM-DD'),\n                values: []\n            })\n        }\n\n        for(const dataToShowData of dataToShow) {\n            for(const dataData of data) {\n                if(dataToShowData.date === dataData.date) {\n                    dataToShowData.values = dataData.values\n                }\n            }\n        }\n\n        return dataToShow\n    }\n\n    calculateMaxSpendTime() {\n        let maxSpendMinutes = this.state.maxSpendMinutes\n\n        for(const data of this.getPerformanceData()) {\n            if(this.getTotalThisDateDataValue(data) > maxSpendMinutes) {\n                maxSpendMinutes = this.getTotalThisDateDataValue(data)\n            }\n        }\n\n        this.setState({maxSpendMinutes})\n    }\n\n    getTotalThisDateDataValue(data) {\n        let totalThisDateDataValue = 0\n\n        for(const value of data.values) {\n            totalThisDateDataValue += value.spendMinutes\n        }\n\n        return totalThisDateDataValue\n    }\n}","const colors = [\n    \"#1d8ec2\",\n    \"#80c6e2\",\n    // \"#61e2a2\",\n    // \"#2ec45b\",\n    \"#3c8172\",\n    \"#6b740c\",\n    \"#edc112\",\n    \"#cd6242\",\n    \"#7f2937\",\n    \"#c41818\",\n    \"#eb4166\",\n    \"#e5a6c9\",\n    // \"#abbabd\",\n    // \"#706296\",\n    // \"#4c1b66\",\n    \"#2c3f8c\",\n    \"#2e3659\"\n]\n\nexport function getRandomColor() {\n    return colors[getRandomInt(0, colors.length)]\n}\n\nfunction getRandomInt(minNumber, maxNumber) {\n    const min = Math.ceil(minNumber)\n    const max = Math.floor(maxNumber)\n\n    return Math.floor(Math.random() * (max - min)) + min //The maximum is exclusive and the minimum is inclusive\n}","import React from 'react'\n\nimport { Helmet } from \"react-helmet\"\n\nimport moment from 'moment'\nimport 'moment/locale/id'\n\nimport ProductivityItem from '../components/ProductivityItem'\nimport BreakItem from '../components/BreakItem'\nimport AddTaskModal from '../components/AddTaskModal'\nimport CounterModal from '../components/CounterModal'\nimport BreakCounterModal from '../components/BreakCounterModal'\nimport PerformanceChart from '../components/PerformanceChart'\n\nimport keys from '../refs/keys'\nimport { getRandomColor } from '../refs/colors'\n\nconst FADE_OPACITY = 0.2\n\nexport default class extends React.Component {\n\tlatestId = 0\n\tprogresses = []\n\tactivityName = ''\n\ttaskName = ''\n\n\tstate = {\n\t\taddTaskToIndex: null,\n\t\tcolorsData: undefined,\n\t\tdata: [],\n\t\tindex: null,\n\t\tisBreakProcessingCount: false,\n\t\tisProcessingCount: false,\n\t\tisShowPerformanceChart: false,\n\t\tmode: 'Main',\n\t\tselectedDate: moment().format('YYYY-MM-DD')\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadData()\n\t}\n\n\trender() {\n\t\tconst { state } = this\n\t\tconst { addTaskToIndex, colorsData, data, index, mode, isProcessingCount, isBreakProcessingCount, isShowPerformanceChart, selectedDate } = state\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName = 'home-container'\n\t\t\t\tstyle = {{\n\t\t\t\t\tbackgroundColor: mode === 'Main' ? 'black' : 'rgb(50,50,50)'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Helmet>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tcharSet = \"utf-8\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<title> \n\t\t\t\t\t\t{mode === 'Main' ? 'Main Area' : `View Edit Area - ${moment(selectedDate).format('DD MMMM YYYY')}`}\n\t\t\t\t\t</title>\n\t\t\t\t</Helmet>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName = 'home-title-container'\n\t\t\t\t>\n\t\t\t\t\t<h1\n\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\topacity: mode === 'Main' && index !== null && selectedDate === moment().format('YYYY-MM-DD') ? FADE_OPACITY : 1\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tDedicated Time Winner\n\t\t\t\t\t</h1>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName = 'top-buttons-container'\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tmode === 'View Edit' ?\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName = 'top-button'\n\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\tonClick = {() => this.seeMyPerformance()}\n\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\topacity: mode === 'Main'  && index !== null && selectedDate === moment().format('YYYY-MM-DD') ? FADE_OPACITY : 1\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSee my performance\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName = 'top-button'\n\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\tif(mode === 'View Edit') {\n\t\t\t\t\t\t\t\tthis.setState({selectedDate: moment().format('YYYY-MM-DD')})\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.setState({mode: mode === 'View Edit' ? 'Main' : 'View Edit'})\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\topacity: mode === 'Main'  && index !== null && selectedDate === moment().format('YYYY-MM-DD') ? FADE_OPACITY : 1\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{mode === 'View Edit' ? 'Back to Main Area' : 'Go to View-Edit Area'}\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\tmode === 'View Edit' ?\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName = 'date-indicator-container'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName = 'date-navigator'\n\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\tonClick = {() => this.incrementSelectedDateWith(-1)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{'< Previous day'}\n\t\t\t\t\t\t\t</a>\n\n\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\tclassName = 'date-indicator'\n\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{moment(selectedDate).format('DD MMMM YYYY')}\n\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tselectedDate === moment().format('YYYY-MM-DD') ?\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\t\t\tmarginLeft: 20,\n\t\t\t\t\t\t\t\t\t\t\tmarginRight: 20,\n\t\t\t\t\t\t\t\t\t\t\twidth: 92.5\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\tclassName = 'date-navigator'\n\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\tonClick = {() => this.incrementSelectedDateWith(1)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{'Next day >'}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t<div\n\t\t\t\t\tclassName = 'home-content-container'\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tmode === 'View Edit' && selectedDate === moment().format('YYYY-MM-DD') ?\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName = 'add-item-container'\n\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\tmarginBottom: 30\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addTask(0)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t+ Add Task\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item-divider'\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addBreak(0)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t+ Add Break\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t\tdata.map((dataItem, dataIndex) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey = {dataItem.id}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdataItem.dayDate === selectedDate || (selectedDate === moment().format('YYYY-MM-DD') && dataItem.dayDate === undefined) ?\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tdataItem.id !== this.getTodayTopMostItemId() ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmode === 'View Edit' && index != null && dataIndex <= index + 1 ?\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'item-filler'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'add-item-filler-container'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addTask(dataIndex)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ Add Task\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'add-item-divider'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmargin: 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addBreak(dataIndex)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ Add Break\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName = 'item-filler-permanent'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topacity: (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmode === 'Main' &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex !== null &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex !== dataIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmode === 'View Edit' &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex !== null &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex < dataIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedDate === moment().format('YYYY-MM-DD') ? FADE_OPACITY : 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdataItem.type === 'productivity' ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ProductivityItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfocusAtIndex = {index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex = {dataIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem = {dataItem}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmode = {mode}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonRemove = {() => this.removeItem(dataIndex)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonStart = {() => this.setState({isProcessingCount: true})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BreakItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfocusAtIndex = {index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex = {dataIndex}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem = {dataItem}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmode = {mode}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonRemove = {() => this.removeItem(dataIndex)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonStart = {() => this.setState({isBreakProcessingCount: true})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\n\t\t\t\t\t{\n\t\t\t\t\t\tmode === 'View Edit' && data.length > 0 && index === data.length - 1 && selectedDate === moment().format('YYYY-MM-DD') ?\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName = 'add-item-container'\n\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\tmarginTop: 30\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addTask(data.length)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t+ Add Task\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item-divider'\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName = 'add-item'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\thref = '/dedicated-time-winner/#'\n\t\t\t\t\t\t\t\t\t\tonClick = {() => this.addBreak(data.length)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t+ Add Break\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\tisShowPerformanceChart ?\n\t\t\t\t\t\t<PerformanceChart\n\t\t\t\t\t\t\tcolorsData = {colorsData}\n\t\t\t\t\t\t\tnativeData = {data}\n\t\t\t\t\t\t\tonDismiss = {() => this.setState({isShowPerformanceChart: false})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\tisProcessingCount ?\n\t\t\t\t\t\t<CounterModal\n\t\t\t\t\t\t\tcurrentTask = {data[index].taskName}\n\t\t\t\t\t\t\tsendProgresses = {this.sendProgresses}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\tisBreakProcessingCount ?\n\t\t\t\t\t\t<BreakCounterModal\n\t\t\t\t\t\t\tsendBreakProgress = {this.sendBreakProgress}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\taddTaskToIndex !== null ?\n\t\t\t\t\t\t<AddTaskModal\n\t\t\t\t\t\t\tonAddTask = {(activityName, taskName) => this.applyAddTask(activityName, taskName)}\n\t\t\t\t\t\t\tonDismiss = {() => this.setState({addTaskToIndex: null})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tgetTodayTopMostItemId() {\n\t\tlet id = -1\n\n\t\tconst latestData = JSON.parse(JSON.stringify(this.state.data))\n\t\tlatestData.reverse()\n\n\t\tfor(const dataIndex in latestData) {\n\t\t\tif(this.state.selectedDate === moment().format('YYYY-MM-DD')) {\n\t\t\t\tif(latestData[dataIndex].dayDate === undefined || latestData[dataIndex].dayDate === this.state.selectedDate) {\n\t\t\t\t\tid = latestData[dataIndex].id\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(latestData[dataIndex].dayDate === this.state.selectedDate) {\n\t\t\t\t\tid = latestData[dataIndex].id\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn id\n\t}\n\n\tasync loadData() {\n\t\t// localStorage.removeItem(keys.LOCAL_STORAGE_DATA)\n\t\t// localStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t// localStorage.removeItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\t\t// localStorage.removeItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS)\n\t\t// await localStorage.setItem(keys.LOCAL_STORAGE_DATA, `\n\t\t// \t[{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Monic\",\n\t\t// \t\t\"taskName\": \"Update PM\",\n\t\t// \t\t\"startedAt\": \"09:51\",\n\t\t// \t\t\"minutes\": 30,\n\t\t// \t\t\"emoji\": \"💪\",\n\t\t// \t\t\"id\": 5,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Sewa-Sewa\",\n\t\t// \t\t\"taskName\": \"Memasang API home\",\n\t\t// \t\t\"startedAt\": \"09:11\",\n\t\t// \t\t\"minutes\": 40,\n\t\t// \t\t\"emoji\": \"💪\",\n\t\t// \t\t\"id\": 12,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"break\",\n\t\t// \t\t\"startedAt\": \"09:01\",\n\t\t// \t\t\"minutes\": 10,\n\t\t// \t\t\"id\": 11,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Sewa-Sewa\",\n\t\t// \t\t\"taskName\": \"Memasang API home\",\n\t\t// \t\t\"startedAt\": \"08:11\",\n\t\t// \t\t\"minutes\": 50,\n\t\t// \t\t\"emoji\": \"\",\n\t\t// \t\t\"id\": 10,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"break\",\n\t\t// \t\t\"startedAt\": \"07:41\",\n\t\t// \t\t\"minutes\": 30,\n\t\t// \t\t\"id\": 9,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Sewa-Sewa\",\n\t\t// \t\t\"taskName\": \"Memasang API home\",\n\t\t// \t\t\"startedAt\": \"06:31\",\n\t\t// \t\t\"minutes\": 70,\n\t\t// \t\t\"emoji\": \"\",\n\t\t// \t\t\"id\": 4,\n\t\t// \t\t\"dayDate\": \"2020-03-13\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Dedicated Time Winner\",\n\t\t// \t\t\"taskName\": \"Day date progress diberikan langsung ketika pertama kali\",\n\t\t// \t\t\"startedAt\": \"09:21\",\n\t\t// \t\t\"minutes\": 90,\n\t\t// \t\t\"emoji\": \"💪\",\n\t\t// \t\t\"id\": 7,\n\t\t// \t\t\"dayDate\": \"2020-03-12\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"break\",\n\t\t// \t\t\"startedAt\": \"09:01\",\n\t\t// \t\t\"minutes\": 20,\n\t\t// \t\t\"id\": 6,\n\t\t// \t\t\"dayDate\": \"2020-03-12\"\n\t\t// \t},\n\t\t// \t{\n\t\t// \t\t\"type\": \"productivity\",\n\t\t// \t\t\"activityName\": \"Dedicated Time Winner\",\n\t\t// \t\t\"taskName\": \"Day date progress diberikan langsung ketika pertama kali\",\n\t\t// \t\t\"startedAt\": \"08:31\",\n\t\t// \t\t\"minutes\": 30,\n\t\t// \t\t\"emoji\": \"\",\n\t\t// \t\t\"id\": 3,\n\t\t// \t\t\"dayDate\": \"2020-03-12\"\n\t\t// \t}]\n\t\t// `)\n\n\t\tlet data = await localStorage.getItem(keys.LOCAL_STORAGE_DATA)\n\t\tlet newIndex = await localStorage.getItem(keys.LOCAL_STORAGE_INDEX)\n\t\tlet runningProgress = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_PROGRESS)\n\t\tlet runningBreakProgress = await localStorage.getItem(keys.LOCAL_STORAGE_RUNNING_BREAK_PROGRESS)\n\n\t\tthis.updateColorsData()\n\n\t\tif(data !== null) {\n\t\t\tdata = JSON.parse(data)\n\n\t\t\tfor(const item of data) {\n\t\t\t\tif(this.latestId < item.id) {\n\t\t\t\t\tthis.latestId = item.id + 1\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setState({data})\n\t\t}\n\n\t\tif(newIndex !== null) {\n\t\t\tthis.setState({index: Number(newIndex)})\n\t\t}\n\n\t\tif(runningProgress !== null) {\n\t\t\tthis.setState({isProcessingCount: true})\n\t\t}\n\n\t\tif(runningBreakProgress !== null) {\n\t\t\tthis.setState({isBreakProcessingCount: true})\n\t\t}\n\t}\n\n\tsendProgresses = async(newProgresses) => {\n\t\tconst { state } = this\n\t\tconst { data, index } = state\n\n\t\tthis.setState({isProcessingCount: false})\n\n\t\tconst newData = JSON.parse(JSON.stringify(data))\n\n\t\tthis.activityName = newData[index].activityName\n\t\tthis.taskName = newData[index].taskName\n\n\t\tthis.progresses = newProgresses\n\n\t\tfor(const progressIndex in this.progresses) {\n\t\t\tconst thisProgress = this.progresses[progressIndex]\n\n\t\t\tif(Number(progressIndex) !== 0) {\n\t\t\t\tconst progressType = thisProgress.type\n\n\t\t\t\tthis.latestId++\n\n\t\t\t\tif(progressType === 'productivity') {\n\t\t\t\t\tnewData.splice(\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'productivity',\n\t\t\t\t\t\t\tactivityName: this.activityName,\n\t\t\t\t\t\t\ttaskName: this.taskName,\n\t\t\t\t\t\t\tstartedAt: '',\n\t\t\t\t\t\t\tminutes: 0,\n\t\t\t\t\t\t\temoji: '',\n\t\t\t\t\t\t\tid: this.latestId\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t} else if(progressType === 'break') {\n\t\t\t\t\tnewData.splice(\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'break',\n\t\t\t\t\t\t\tstartedAt: '',\n\t\t\t\t\t\t\tminutes: 0,\n\t\t\t\t\t\t\tid: this.latestId\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tselectedDate: moment().format('YYYY-MM-DD'),\n\t\t\tindex: index + this.progresses.length - 1,\n\t\t\tdata: newData\n\t\t})\n\t\t\n\t\tthis.updateProgresses(newData, index + this.progresses.length - 1)\n\n\t\tawait this.assignColorIfHaveNoColor(newData[index].activityName)\n\n\t\tthis.updateColorsData()\n\t}\n\n\tsendBreakProgress = (startedAt, dayDate, minutes) => {\n\t\tconst { state } = this\n\t\tconst { data, index } = state\n\n\t\tconst newData = JSON.parse(JSON.stringify(data))\n\t\tlet newIndex = index - 1 < 0 ? null : index - 1\n\n\t\tnewData[index].startedAt = startedAt\n\t\tnewData[index].minutes = minutes\n\t\tnewData[index].dayDate = dayDate\n\n\t\tthis.setState({\n\t\t\tselectedDate: moment().format('YYYY-MM-DD'),\n\t\t\tisBreakProcessingCount: false,\n\t\t\tdata: newData,\n\t\t\tindex: newIndex\n\t\t})\n\n\t\tif(newIndex !== null) {\n\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_INDEX, newIndex)\n\t\t} else {\n\t\t\tlocalStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t}\n\n\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_DATA, JSON.stringify(newData))\n\t}\n\t \n\tremoveItem(dataIndex) {\n\t\tconst { state } = this\n\t\tconst { data, index } = state\n\n\t\tconst newData = []\n\n\t\tfor(const thisDataIndex in data) {\n\t\t\tif(dataIndex !== Number(thisDataIndex)) {\n\t\t\t\tnewData.push(data[thisDataIndex])\n\t\t\t}\n\t\t}\n\n\t\tlet newIndex = dataIndex > index ? index : (index > 0 ? index - 1 : null)\n\n\t\tthis.setState({\n\t\t\tdata: newData,\n\t\t\tindex: newIndex\n\t\t})\n\n\t\tif(newIndex !== null) {\n\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_INDEX, newIndex)\n\t\t} else {\n\t\t\tlocalStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t}\n\n\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_DATA, JSON.stringify(newData))\n\t}\n\t \n\taddTask(toIndex) {\n\t\tthis.setState({addTaskToIndex: toIndex})\n\t}\n\n\tasync addBreak(toIndex) {\n\t\tconst { state } = this\n\t\tconst { data, index } = state\n\t\t\n\t\tconst newData = JSON.parse(JSON.stringify(data))\n\n\t\tthis.latestId++\n\n\t\tnewData.splice(\n\t\t\ttoIndex,\n\t\t\t0,\n\t\t\t{\n\t\t\t\ttype: 'break',\n\t\t\t\tstartedAt: '',\n\t\t\t\tminutes: 0,\n\t\t\t\tid: this.latestId\n\t\t\t}\n\t\t)\n\n\t\tlet newIndex = index == null ? 0 : index + 1\n\n\t\tthis.setState({\n\t\t\tdata: newData,\n\t\t\tindex: newIndex\n\t\t})\n\n\t\tif(newIndex !== null) {\n\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_INDEX, newIndex)\n\t\t} else {\n\t\t\tlocalStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t}\n\n\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_DATA, JSON.stringify(newData))\n\t}\n\n\tasync applyAddTask(activityName, taskName) {\n\t\tconst { state } = this\n\t\tconst { addTaskToIndex, data, index } = state\n\n\t\tconst newData = JSON.parse(JSON.stringify(data))\n\n\t\tthis.latestId++\n\n\t\tnewData.splice(\n\t\t\taddTaskToIndex,\n\t\t\t0,\n\t\t\t{\n\t\t\t\ttype: 'productivity',\n\t\t\t\tactivityName: activityName,\n\t\t\t\ttaskName: taskName,\n\t\t\t\tstartedAt: '',\n\t\t\t\tminutes: 0,\n\t\t\t\temoji: '',\n\t\t\t\tid: this.latestId\n\t\t\t}\n\t\t)\n\n\t\tlet newIndex = index == null ? 0 : index + 1\n\t\t\n\t\tthis.setState({\n\t\t\tdata: newData,\n\t\t\tindex: newIndex,\n\t\t\taddTaskToIndex: null\n\t\t})\n\n\t\tif(newIndex !== null) {\n\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_INDEX, newIndex)\n\t\t} else {\n\t\t\tlocalStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t}\n\n\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_DATA, JSON.stringify(newData))\n\t}\n\n\tasync assignColorIfHaveNoColor(activityName) {\n\t\tconst asssignedColors = await localStorage.getItem(keys.LOCAL_STORAGE_ASSIGNED_COLORS)\n\n\t\tlet asssignedColorsJSON = {}\n\n\t\tif(asssignedColors !== null) {\n\t\t\tasssignedColorsJSON = JSON.parse(asssignedColors)\n\n\t\t\tif(asssignedColorsJSON[activityName] === undefined) {\n\t\t\t\tasssignedColorsJSON[activityName] = getRandomColor()\n\t\t\t}\n\t\t} else {\n\t\t\tasssignedColorsJSON[activityName] = getRandomColor()\n\t\t}\n\n\t\tawait localStorage.setItem(keys.LOCAL_STORAGE_ASSIGNED_COLORS, JSON.stringify(asssignedColorsJSON))\n\t}\n\t \n\tupdateProgresses(newData, latestIndex, progressIndex = 0) {\n\t\tlet currentIndex = latestIndex\n\n\t\tconst thisProgress = this.progresses[progressIndex]\n\n\t\tif(Number(progressIndex) === 0) {\n\t\t\tnewData[currentIndex].startedAt = thisProgress.startedAt\n\t\t\tnewData[currentIndex].minutes = thisProgress.minutes\n\t\t\tnewData[currentIndex].emoji = thisProgress.emoji\n\t\t\tnewData[currentIndex].dayDate = thisProgress.dayDate\n\t\t} else {\n\t\t\tconst progressType = thisProgress.type\n\n\t\t\tif(progressType === 'productivity') {\n\t\t\t\tnewData[currentIndex].startedAt = thisProgress.startedAt\n\t\t\t\tnewData[currentIndex].minutes = thisProgress.minutes\n\t\t\t\tnewData[currentIndex].emoji = thisProgress.emoji\n\t\t\t\tnewData[currentIndex].dayDate = thisProgress.dayDate\n\t\t\t} else if(progressType === 'break') {\n\t\t\t\tnewData[currentIndex].startedAt = thisProgress.startedAt\n\t\t\t\tnewData[currentIndex].minutes = thisProgress.minutes\n\t\t\t\tnewData[currentIndex].dayDate = thisProgress.dayDate\n\t\t\t}\n\t\t}\n\n\t\t--currentIndex\n\n\t\tif(currentIndex < 0) {\n\t\t\tcurrentIndex = null\n\t\t}\n\n\t\tthis.setState({\n\t\t\tdata: newData,\n\t\t\tindex: currentIndex\n\t\t})\n\n\t\tif(progressIndex < this.progresses.length - 1) {\n\t\t\tsetTimeout(() => this.updateProgresses(newData, currentIndex, Number(progressIndex) + 1), 150)\n\t\t} else {\n\t\t\tif(currentIndex) {\n\t\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_INDEX, currentIndex)\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(keys.LOCAL_STORAGE_INDEX)\n\t\t\t}\n\n\t\t\tlocalStorage.setItem(keys.LOCAL_STORAGE_DATA, JSON.stringify(newData))\n\t\t}\n\t}\n\n\tseeMyPerformance() {\n\t\tthis.setState({isShowPerformanceChart: true})\n\t}\n\n\tasync updateColorsData() {\n\t\tlet colorsData = await localStorage.getItem(keys.LOCAL_STORAGE_ASSIGNED_COLORS)\n\t\n\t\tif(colorsData !== null) {\n\t\t\tcolorsData = JSON.parse(colorsData)\n\n\t\t\tthis.setState({colorsData})\n\t\t}\n\t}\n\n\tincrementSelectedDateWith(number) {\n\t\tconst date = new Date(this.state.selectedDate)\n\n\t\tdate.setDate(date.getDate() + number)\n\t\t\n\t\tthis.setState({selectedDate: moment(date).format('YYYY-MM-DD')})\n\t}\n}","import React from 'react'\n\nimport Home from './screens/Home'\n\nexport default class extends React.Component {\n    render() {\n        require('./index.css')\n\n        return (\n            <Home />\n        )\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { unregister } from './serviceWorker'\n\nimport { Switch, Redirect } from 'react-router-dom'\n\nimport App from './App'\n\nReactDOM.render(\n    (\n        <BrowserRouter>\n            <Switch>\n                <App />\n\n                <Redirect\n                    to = \"/dedicated-time-winner/#\"\n                />\n            </Switch>\n        </BrowserRouter>\n    ),\n    document.getElementById('root')\n)\n\nunregister()"],"sourceRoot":""}